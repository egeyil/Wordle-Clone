*, *::after, *::before {
    box-sizing: border-box; /* If you set box-sizing: border-box; 
    on an element, padding and border are included in the width 
    and height */
    font-family: Arial, Helvetica, sans-serif;
}

/* Most of the sizes are based on em because em is based on font size, 
and as the font size changes everything scales accordingly. */

body {
    background-color: hsl(240, 3%, 7%);
    display: flex;
    flex-direction: column;
    min-height: 100vh;
    margin: 0;
    padding: 1em;
    font-size: clamp(.5rem, 2.5vmin, 1.5rem); /* .5 minimum 2.5vmin orta 
    1.5 rem max size */
}

.keyboard {
    display: grid;
    grid-template-columns: repeat(20, minmax(auto, 1.25em)); 
    /* We make the columns one half of each button
    so that we can have half-button sized spaces in the middle row of the 
    keyboard. Because of this we repeat the columns 20 times, not 10 times. */
    grid-auto-rows: 3em; /* Buttons are 3em tall */
    gap: .25em; /* Gap between the buttons are .25em */
    justify-content: center; /* Keyboard is dead center */
}

.key {
    font-size: inherit;
    grid-column: span 2; /* We make the buttons span 2 columns with this. */
    border: none;
    padding: 0;
    /* We want to make sure everything is centered so we display
    flex and justify-content center. */
    display: flex;
    justify-content: center;
    align-items: center; /* This makes sure that the text shows up 
    in the center of the buttons. */

    /* We make the colors a variable and set their 
    default states, so that we can change them to green or give them hover 
    states easily. */
    background-color: hsl( 
        var(--hue, 200)
        var(--saturation, 1%)
        calc(var(--lightness-offset, 0%) + var(--lightness, 51%)) 
        /* Whatever offset we have in our lightness, add it to our current 
        lightness, and this offset is by default 0. */
    );
    

    color: white; /* Color of text inside the buttons */
    fill: white; /* Makes the backspace button white */
    text-transform: uppercase;
    border-radius: .25em; /* Makes the buttons rounder on the edges */
    cursor: pointer;
    user-select: none; /* Makes sure that user can't highlight any of 
    the text in the keyboard */
}

.key.large {
    grid-column: span 3;
}

.key > svg { /* Making sure svgs in the keyboard are the right size. */
    width: 1.75em;
    height: 1.75em;
}

.key:hover, .key:focus { /* Hover -> mouse hover, focus -> typing with a real keyboard. */
    --lightness-offset: 10%;
}

/* It is really important that we put the classes below in correct order,
so that correct class overwrites wrong-location, and wrong-location 
overwrites wrong class. */

.key.wrong { /* Wrong letters appear black. */
    --lightness: 23%;
}

.key.wrong-location {
    --hue: 49;
    --saturation: 51%;
    --lightness: 47%;
}

.key.correct {
    --hue: 115;
    --saturation: 29%;
    --lightness: 43%;
}

.guess-grid {
    display: grid;
    justify-content: center;
    align-content: center; /* Also aligning everything vertically. */
    flex-grow: 1; /* This is going to make this section fill the page and 
    push the keyboard to the button. */
    grid-template-columns: repeat(5, 4em); /* 5 colums each 4em wide. */
    grid-template-rows: repeat(6, 4em);
    gap: .25em;
    margin-bottom: 1em;
}

.tile {
    font-size: 2em;
    color: white;
    border: .05em solid hsl(240, 2%, 23%);
    text-transform: uppercase;
    font-weight: bold;
    /* Display flex is pretty much the best way to center the letters. */
    display: flex;
    justify-content: center;
    align-items: center;
    user-select: none;
    transition: transform 250ms linear; /* we specified in js file the 
    transform is 500ms but it is happening twice so we make it 250ms here.
    Also it is a linear animation frame. */
}

/* We use states to make the tiles appear green, yellow 
and active (typed but not submitted) .*/

.tile[data-state="active"] {
    border-color: hsl(200, 1%, 34%);
}

.tile[data-state="wrong"] {
    border: none;
    background-color: hsl(240, 2%, 23%);
}

.tile[data-state="wrong-location"] {
    border: none;
    background-color: hsl(49, 51%, 47%);
}

.tile[data-state="correct"] {
    border: none;
    background-color: hsl(115, 29%, 43%);
}

.tile.shake {
    animation: shake 250ms ease-in-out;
}

.tile.dance {
    animation: dance 500ms ease-in-out;
}

.tile.flip {
    transform: rotateX(90deg);
}

@keyframes shake {
    10% {
        transform: translateX(-5%);
    }

    30% {
        transform: translateX(5%);
    }

    50% {
        transform: translateX(-7.5%);
    }

    70% {
        transform: translateX(7.5%);
    }

    90% {
        transform: translateX(-5%);
    }

    100% {
        transform: translateX(0);
    }
}

@keyframes dance {
    20% {
      transform: translateY(-50%);
    }  
  
    40% {
      transform: translateY(5%);
    }  
  
    60% {
      transform: translateY(-25%);
    }  
  
    80% {
      transform: translateY(2.5%);
    }  
  
    90% {
      transform: translateY(-5%);
    }  
  
    100% {
      transform: translateY(0);
    }
  }

.alert-container {
    position: fixed;
    top: 10vh;
    left: 50vw;
    transform: translateX(-50%);
    z-index: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
}

.alert {
    pointer-events: none; /* We don't want to select the alert itself */
    background-color: hsl(204, 7%, 85%);
    padding: .75em;
    border-radius: .25em;
    opacity: 1;
    transition: opacity 500ms ease-in-out; /* ease-in-out is a timing curve */ 
    margin-bottom: .5em;
} 

.alert:last-child {
    margin-bottom: 0;
}

.alert.hide {
    opacity: 0;
}